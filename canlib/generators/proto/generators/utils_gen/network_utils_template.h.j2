#include <string>
#include "{{ filename }}.pb.h"
extern "C" {
#include "../../../../lib/{{ filename }}/c/network.h"
}
#define BITSET_VALUE(bitset, size) \
bitset_value=0; \
current_value=0; \
for(short i = 0; i < size*8; i++){ \
current_value += getBit(bitset, i); \
if(i%8 == 7){ \
short shift_amount = i/8; \
current_value <<= 8*shift_amount; \
bitset_value += current_value; \
current_value = 0; \
} \
}


void {{filename}}_proto_serialize_from_id(uint32_t id, {{filename}}::{{utils.to_camel_case(filename,"_")}}MessagesPacked* pack,  {{filename}}_devices* map)
{
    int map_idx = {{filename}}_devices_index_from_id(id, map);
    if(map_idx == -1)
        return;
    
    switch(id) {
{%- for message_name, message_ids in messages.items()-%}
{%- for message_id in message_ids %}
{%- for name, id in message_id.items() %}
        // ============== {{name}} ============== //
        case {{ id }}:
        {
{%- if structs[message_name].has_conversions %}
            {{filename}}_message_{{message_name}}_conversion* msg = ({{filename}}_message_{{message_name}}_conversion*) (*map)[map_idx].conversion_message;
{%- else %}
            {{filename}}_message_{{message_name}}* msg = ({{filename}}_message_{{message_name}}*) (*map)[map_idx].raw_message;
{%- endif %}
            {{filename}}::{{utils.to_camel_case(message_name,"_")}}* proto_msg = pack->add_{{message_name.lower()}}();

{%- if structs[message_name].fields %}
{%- for field in structs[message_name].fields %}
{%- set snake_case_name = utils.to_snake_case(field.name) %}
{%- if field.name == "_timestamp" %}
#ifdef CANLIB_TIMESTAMP
{%- endif %}
            proto_msg->set_{{ snake_case_name }}(
{%- if isinstance(field.type, Enum) -%}
            ({{filename}}::{{utils.to_camel_case(field.type.proto_type,"_")}})
{%- endif -%}
            msg->{{ field.name }});
{%- if field.name == "_timestamp" %}
#endif // CANLIB_TIMESTAMP
{%- endif %}
{%- endfor %}
{%- endif %}
        }
        break;
{% endfor %}
{%- endfor %}
{%- endfor %}
    }
}