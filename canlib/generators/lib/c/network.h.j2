#ifndef {{ network.name }}_NETWORK_H
#define {{ network.name }}_NETWORK_H

#ifdef __cplusplus
extern "C" {
#endif

#include <inttypes.h>
#include <stdbool.h>
#include <assert.h>
#include <stdint.h>
#include <string.h>
#include <stdlib.h>
#include <memory.h>
#include <stdio.h>

#ifndef CANLIB_ASSERTS
#define CANLIB_ASSERTS

static_assert(sizeof(float) == 4, "canlib: sizeof(float) != 4 BYTES");
static_assert(sizeof(double) == 8, "canlib: sizeof(double) != 8 BYTES");

/* Is it little endian?

          ████████                        ████████
        ██        ██                  ████        ████
      ██▒▒▒▒        ██              ██▒▒              ██
    ██▒▒▒▒▒▒      ▒▒▒▒██          ██▒▒▒▒            ▒▒▒▒██
    ██▒▒▒▒▒▒      ▒▒▒▒██          ██▒▒▒▒  ▒▒▒▒▒▒    ▒▒▒▒██
  ██  ▒▒▒▒        ▒▒▒▒▒▒██      ██▒▒▒▒  ▒▒▒▒▒▒▒▒▒▒  ▒▒▒▒▒▒██
  ██                ▒▒▒▒██      ██      ▒▒▒▒▒▒▒▒▒▒    ▒▒▒▒██
██▒▒      ▒▒▒▒▒▒          ██    ██      ▒▒▒▒▒▒▒▒▒▒        ██
██      ▒▒▒▒▒▒▒▒▒▒        ██    ██▒▒      ▒▒▒▒▒▒          ██
██      ▒▒▒▒▒▒▒▒▒▒    ▒▒▒▒██      ██                ▒▒▒▒██
██▒▒▒▒  ▒▒▒▒▒▒▒▒▒▒  ▒▒▒▒▒▒██      ██  ▒▒▒▒        ▒▒▒▒▒▒██
  ██▒▒▒▒  ▒▒▒▒▒▒    ▒▒▒▒██          ██▒▒▒▒▒▒      ▒▒▒▒██
  ██▒▒▒▒            ▒▒▒▒██          ██▒▒▒▒▒▒      ▒▒▒▒██
    ██▒▒              ██              ██▒▒▒▒        ██
      ████        ████                  ██        ██
          ████████                        ████████

                                    Or is it big endian? */
#ifndef __CANLIB_ENDIAN_ORDER
    #define __CANLIB_ENDIAN_ORDER 1094861636L // "ABCD"
#endif
#if !defined(__CANLIB_LITTLE_ENDIAN) && !defined(__CANLIB_BIG_ENDIAN) && !defined(__CANLIB_PDP_ENDIAN)
    #if __CANLIB_ENDIAN_ORDER==0x41424344UL
        #define __CANLIB_LITTLE_ENDIAN
    #elif __CANLIB_ENDIAN_ORDER==0x44434241UL
        #define __CANLIB_BIG_ENDIAN
    #elif __CANLIB_ENDIAN_ORDER==0x42414443UL
        #define __CANLIB_PDP_ENDIAN
    #else
        #error "canlib: endianess not supported"
    #endif
#endif

#ifndef __CANLIB_{{ endianess }}
    #error "canlib: endianess not supported"
#endif

#endif // CANLIB_ASSERTS

#ifndef CANLIB_SHARED
#define CANLIB_SHARED

/* We know it's PACKING but PARKING sounds a bit better ;) */
#if defined(__MINGW32__)
#define CANLIB_PARKING __attribute__((__gcc_struct__, __packed__)) // , __aligned__(1)))
#else
#define CANLIB_PARKING __attribute__((__packed__)) // , __aligned__(1)))
#endif

#define PRIf32 "f"
#define PRIf64 "f"

#endif // CANLIB_SHARED

#ifndef CANLIB_BITMASK_UTILS
#define CANLIB_BITMASK_UTILS

#define CANLIB_BITMASK_TYPE uint8_t
#define CANLIB_BITMASK_TYPE_BITS 8

#define CANLIB_BITMASK_ARRAY(b) (1 << ((b) % CANLIB_BITMASK_TYPE_BITS))
#define CANLIB_BITSLOT_ARRAY(b) ((b) / CANLIB_BITMASK_TYPE_BITS)
#define CANLIB_BITSET_ARRAY(a, b) ((a)[CANLIB_BITSLOT_ARRAY(b)] |= CANLIB_BITMASK_ARRAY(b))
#define CANLIB_BITCLEAR_ARRAY(a, b) ((a)[CANLIB_BITSLOT_ARRAY(b)] &= ~CANLIB_BITMASK_ARRAY(b))
#define CANLIB_BITTEST_ARRAY(a, b) ((a)[CANLIB_BITSLOT_ARRAY(b)] & CANLIB_BITMASK_ARRAY(b))
#define CANLIB_BITNSLOTS_ARRAY(nb) ((nb + CANLIB_BITMASK_TYPE_BITS - 1) / CANLIB_BITMASK_TYPE_BITS)

#define CANLIB_BITMASK(b) (1 << (b))
#define CANLIB_BITSET(a, b) ((a) |= CANLIB_BITMASK(b))
#define CANLIB_BITCLEAR(a, b) ((a) &= ~CANLIB_BITMASK(b))
#define CANLIB_BITTEST(a, b) ((a) & CANLIB_BITMASK(b))

#endif // CANLIB_BITMASK_UTILS

#ifndef CANLIB_SEPARATOR
#define CANLIB_SEPARATOR ","
#endif // CANLIB_SEPARATOR

#ifndef CANLIB_MESSAGE_ID_TYPE
#define CANLIB_MESSAGE_ID_TYPE
typedef uint16_t canlib_message_id;
#endif // CANLIB_MESSAGE_ID_TYPE

// Info

#define {{ network.name }}_NUMBER_OF_MESSAGES {{ network.get_message_count() }}

// Custom types

#define {{ network.name }}_int8 int8_t
#define {{ network.name }}_uint8 uint8_t
#define {{ network.name }}_int16 int16_t
#define {{ network.name }}_uint16 uint16_t
#define {{ network.name }}_int32 int32_t
#define {{ network.name }}_uint32 uint32_t
#define {{ network.name }}_int64 int64_t
#define {{ network.name }}_uint64 uint64_t
#define {{ network.name }}_float32 float
#define {{ network.name }}_float64 double
#define {{ network.name }}_bool bool
#define {{ network.name }}_byte_size uint32_t

typedef union {
    {{ network.name }}_uint8 bytes[4];
    {{ network.name }}_float32 value;
} {{ network.name }}_float32_helper;

typedef union {
    {{ network.name }}_uint8 bytes[8];
    {{ network.name }}_float64 value;
} {{ network.name }}_float64_helper;

#ifdef __cplusplus
#define {{ network.name }}_float32_to_bytes(float, index) (reinterpret_cast<{{ network.name }}_uint8*>(&((float)))[(index)])
#else
#define {{ network.name }}_float32_to_bytes(float, index) ({({{ network.name }}_float32_helper){{ network.name }}_float32_helper.value = (f)}.bytes[(index)])
#endif

typedef struct {
    uint16_t id;
    void* raw_message;
    void* message;
} {{ network.name }}_devices[{{ network.name }}_NUMBER_OF_MESSAGES];

// ============== SIZES ============== //

{% for message in schema.messages %}
#define {{ network.name }}_{{ message.name }}_SIZE {{ message.byte_size }}
{%- endfor %}

// ============== BIT SETS ============== //

{% for bit_set in schema.bit_sets %}
typedef {{ network.name }}_{{ bit_set.base_type.name }} {{ network.name }}_{{ bit_set.name }};
#define {{ network.name }}_{{ bit_set.name }}_DEFAULT 0
{%- for name in bit_set.items %}
#define {{ network.name }}_{{ bit_set.name }}_{{ name }} {{ 2**loop.index0 }}
{%- endfor %}
{% endfor %}

// ============== ENUMS ============== //

{% for enum in schema.enums %}
typedef enum CANLIB_PARKING {
    {%- for name in enum.items %}
    {{ network.name }}_{{ enum.name }}_{{ name }} = {{ loop.index0 }},
    {%- endfor %}
} {{ network.name }}_{{ enum.name }};
{% endfor %}

// Structs

{% for message in schema.messages %}
{%- if message.has_conversions %}
typedef struct CANLIB_PARKING {
{%- if message.fields %}
{%- for field in message.fields %}
{%- if not field.conversion == None %}
    {{ network.name }}_{{ field.conversion.converted_type.name }} {{ field.name }};
{%- else  %}
    {{ network.name }}_{{ field.type.name }} {{ field.name }};
{%- endif -%}

{%- endfor %}
{%- else %}
    {{ network.name }}_uint8 _placeholder; // C++ doesn't like empty structs
{%- endif %}
#ifdef CANLIB_TIMESTAMP
    {{ network.name }}_uint64 _timestamp;
#endif // CANLIB_TIMESTAMP
} {{ network.name }}_message_{{ message.name }}_conversion;
{%- endif %}

typedef struct CANLIB_PARKING {
{%- if message.fields %}
{%- for field in message.fields %}
    {{ network.name }}_{{ field.type.name }} {{ field.name }};
{%- endfor %}
{%- else %}
    {{ network.name }}_uint8 _placeholder; // C++ doesn't like empty structs
{%- endif %}
#ifdef CANLIB_TIMESTAMP
    {{ network.name }}_uint64 _timestamp;
#endif // CANLIB_TIMESTAMP
} {{ network.name }}_message_{{ message.name }};
{% endfor %}

{% for message in schema.messages %}
// ============== {{message.name}} ============== //

{{ network.name }}_byte_size {{ network.name }}_serialize_{{ message.name }}(
    uint8_t* data{% if message.fields %},{% endif %}
{%- for field in message.fields %}
    {{ network.name }}_{{ field.type.name }} {{ field.name }}{% if not loop.last %},{% endif -%}
{%- endfor %}
);
{{ network.name }}_byte_size {{ network.name }}_serialize_struct_{{ message.name }}(
    uint8_t* data,
    {{ network.name }}_message_{{ message.name }}* message
);
void {{ network.name }}_deserialize_{{ message.name }}(
    {{ network.name }}_message_{{ message.name }}* message,
    uint8_t* data
#ifdef CANLIB_TIMESTAMP
    , {{ network.name }}_uint64 timestamp
#endif // CANLIB_TIMESTAMP
);
{%- if message.has_conversions %}
void {{ network.name }}_raw_to_conversion_{{ message.name }}(
    {{ network.name }}_message_{{ message.name }}_conversion* conversion,
    {{ network.name }}_message_{{ message.name }}* raw
);
void {{ network.name }}_conversion_to_raw_{{ message.name }}(
    {{ network.name }}_message_{{ message.name }}* raw,
    {{ network.name }}_message_{{ message.name }}_conversion* conversion
);
{%- endif %}
{% if message.has_conversions -%}
int {{ network.name }}_to_string_{{ message.name }}({{ network.name }}_message_{{ message.name }}_conversion* message, char* buffer);
{% else -%}
int {{ network.name }}_to_string_{{ message.name }}({{ network.name }}_message_{{ message.name }}* message, char* buffer);
{% endif -%}
int {{ network.name }}_fields_{{ message.name }}(char* buffer);
{% if message.has_conversions -%}
int {{ network.name }}_to_string_file_{{ message.name }}({{ network.name }}_message_{{ message.name }}_conversion* message, FILE* buffer);
{% else -%}
int {{ network.name }}_to_string_file_{{ message.name }}({{ network.name }}_message_{{ message.name }}* message, FILE* buffer);
{% endif -%}
int {{ network.name }}_fields_file_{{ message.name }}(FILE* buffer);

{% endfor %}


// ============== UTILS ============== //

void {{ network.name }}_devices_new({{ network.name }}_devices* map);
int {{ network.name }}_devices_index_from_id(canlib_message_id message_id, {{ network.name }}_devices* map);
void {{ network.name }}_fields_from_id(canlib_message_id message_id, FILE *buffer);
void {{ network.name }}_string_from_id(canlib_message_id message_id, void* message, FILE *buffer);
void {{ network.name }}_deserialize_from_id(
    canlib_message_id message_id,
    uint8_t* data,
    void* raw_message,
    void* message
#ifdef CANLIB_TIMESTAMP
    , {{ network.name }}_uint64 timestamp
#endif // CANLIB_TIMESTAMP
);

#ifdef {{ network.name }}_IMPLEMENTATION

{%- for message in schema.messages %}
// ============== SERIALIZE ============== //

{{ network.name }}_byte_size {{ network.name }}_serialize_{{ message.name }}(
    uint8_t* data{% if message.fields %},{% endif %}
{%- for field in message.fields %}
    {{ network.name }}_{{ field.type.name }} {{ field.name }}{% if not loop.last %},{% endif -%}
{%- endfor %}
) {
{%- for index, fields in message.alignment.items() -%}
{%- for field in serialize(network, fields) %}
    data[{{ index + loop.index0 }}] = {{ field }};
{%- endfor %}
{%- endfor %}
    return {{ message.byte_size }};
}

{{ network.name }}_byte_size {{ network.name }}_serialize_struct_{{ message.name }}(
    uint8_t* data,
    {{ network.name }}_message_{{ message.name }}* message
) {
{%- for index, fields in message.alignment.items() -%}
{%- for field in serialize(network, fields, "message->") %}
    data[{{ index + loop.index0 }}] = {{ field }};
{%- endfor %}
{%- endfor %}
    return {{ message.byte_size }};
}

// ============== DESERIALIZE ============== //

void {{ network.name }}_deserialize_{{ message.name }}(
    {{ network.name }}_message_{{ message.name }}* message,
    uint8_t* data
#ifdef CANLIB_TIMESTAMP
    , {{ network.name }}_uint64 _timestamp
#endif // CANLIB_TIMESTAMP
) {
#ifdef CANLIB_TIMESTAMP
    message->_timestamp = _timestamp;
#endif // CANLIB_TIMESTAMP
{%- for index, fields in message.alignment.items() -%}
{%- for name, field in deserialize(network, index, fields).items() %}
    message->{{ name }} = {{ field }};
{%- endfor %}
{%- endfor %}
}

{%- if message.has_conversions -%}
// ============== CONVERSION ============== //

void {{ network.name }}_raw_to_conversion_{{ message.name }}(
    {{ network.name }}_message_{{ message.name }}_conversion* conversion,
    {{ network.name }}_message_{{ message.name }}* raw
){
#ifdef CANLIB_TIMESTAMP
    conversion->_timestamp = raw->_timestamp;
#endif // CANLIB_TIMESTAMP
{%- for field in message.fields -%}
{%- if field.conversion == None %}
    conversion->{{ field.name }} = raw->{{ field.name }};
{%- else %}
    conversion->{{ field.name }} = {{ get_deconversion(field.conversion, network, "raw->" + field.name) }};
{%- endif %}
{%- endfor %}
}
void {{ network.name }}_conversion_to_raw_{{ message.name }}(
    {{ network.name }}_message_{{ message.name }}* raw,
    {{ network.name }}_message_{{ message.name }}_conversion* conversion
){
#ifdef CANLIB_TIMESTAMP
    raw->_timestamp = conversion->_timestamp;
#endif // CANLIB_TIMESTAMP
{%- for field in message.fields -%}
{%- if field.conversion == None %}
    raw->{{ field.name }} = conversion->{{ field.name }};
{%- else %}
    raw->{{ field.name }} = {{get_conversion(field.conversion, network, "conversion->" + field.name) }};
{%- endif %}
{%- endfor %}
}
{%- endif %}

// ============== STRING ============== //

{% if message.has_conversions -%}
int {{ network.name }}_to_string_{{ message.name }}({{ network.name }}_message_{{ message.name }}_conversion* message, char* buffer) {
{%- if message.fields  %}
    return sprintf(
        buffer,
#ifdef CANLIB_TIMESTAMP
        PRIXu64 CANLIB_SEPARATOR
#endif // CANLIB_TIMESTAMP
        {%- for field in message.fields %}
        {% if field.conversion == None -%}
        "%" {{ field.type.format_string }}{% if not loop.last %} CANLIB_SEPARATOR {% endif -%}
        {% else -%}
        "%" {{ field.conversion.converted_type.format_string }}{% if not loop.last %} CANLIB_SEPARATOR {% endif -%}
        {% endif -%}
        {%- endfor %},
#ifdef CANLIB_TIMESTAMP
        message->_timestamp,
#endif // CANLIB_TIMESTAMP
        {%- for field in message.fields %}
        message->{{ field.name }}{%- if not loop.last %},{%- endif -%}
        {%- endfor %}
    );
{%- else %}
    return 0;
{% endif -%}
}
{% else -%}
int {{ network.name }}_to_string_{{ message.name }}({{ network.name }}_message_{{ message.name }}* message, char* buffer) {
{%- if message.fields  %}
    return sprintf(
        buffer,
#ifdef CANLIB_TIMESTAMP
        PRIXu64 CANLIB_SEPARATOR
#endif // CANLIB_TIMESTAMP
        {%- for field in message.fields %}
        "%" {{ field.type.format_string }}{% if not loop.last %} CANLIB_SEPARATOR {% endif -%}
        {%- endfor %},
#ifdef CANLIB_TIMESTAMP
        message->_timestamp,
#endif // CANLIB_TIMESTAMP
        {%- for field in message.fields %}
        message->{{ field.name }}{%- if not loop.last %},{%- endif -%}
        {%- endfor %}
    );
{%- else %}
    return 0;
{% endif -%}
}
{% endif -%}
int {{ network.name }}_fields_{{ message.name }}(char* buffer) {
{%- if message.fields  %}
    return sprintf(
        buffer,
#ifdef CANLIB_TIMESTAMP
        "_timestamp" CANLIB_SEPARATOR
#endif // CANLIB_TIMESTAMP
        {%- for field in message.fields %}
        "{{ field.name }}"{% if not loop.last %} CANLIB_SEPARATOR {% endif -%}
        {%- endfor %}
    );
{%- else %}
    return 0;
{% endif -%}
}
{% if message.has_conversions -%}
int {{ network.name }}_to_string_file_{{ message.name }}({{ network.name }}_message_{{ message.name }}_conversion* message, FILE* buffer) {
{%- if message.fields  %}
    return fprintf(
        buffer,
#ifdef CANLIB_TIMESTAMP
        PRIXu64 CANLIB_SEPARATOR
#endif // CANLIB_TIMESTAMP
        {%- for field in message.fields %}
        {% if field.conversion == None -%}
        "%" {{ field.type.format_string }}{% if not loop.last %} CANLIB_SEPARATOR {% endif -%}
        {% else -%}
        "%" {{ field.conversion.converted_type.format_string }}{% if not loop.last %} CANLIB_SEPARATOR {% endif -%}
        {% endif -%}
        {%- endfor %},
#ifdef CANLIB_TIMESTAMP
        message->_timestamp,
#endif // CANLIB_TIMESTAMP
        {%- for field in message.fields %}
        message->{{ field.name }}{%- if not loop.last %},{%- endif -%}
        {%- endfor %}
    );
{%- else %}
    return 0;
{% endif -%}
}
{% else -%}
int {{ network.name }}_to_string_file_{{ message.name }}({{ network.name }}_message_{{ message.name }}* message, FILE* buffer) {
{%- if message.fields  %}
    return fprintf(
        buffer,
#ifdef CANLIB_TIMESTAMP
        PRIXu64 CANLIB_SEPARATOR
#endif // CANLIB_TIMESTAMP
        {%- for field in message.fields %}
        "%" {{ field.type.format_string }}{% if not loop.last %} CANLIB_SEPARATOR {% endif -%}
        {%- endfor %},
#ifdef CANLIB_TIMESTAMP
        message->_timestamp,
#endif // CANLIB_TIMESTAMP
        {%- for field in message.fields %}
        message->{{ field.name }}{%- if not loop.last %},{%- endif -%}
        {%- endfor %}
    );
{%- else %}
    return 0;
{% endif -%}
}
{% endif -%}

int {{ network.name }}_fields_file_{{ message.name }}(FILE* buffer) {
{%- if message.fields  %}
    return fprintf(
        buffer,
#ifdef CANLIB_TIMESTAMP
        "_timestamp" CANLIB_SEPARATOR
#endif // CANLIB_TIMESTAMP
        {%- for field in message.fields %}
        "{{ field.name }}"{% if not loop.last %} CANLIB_SEPARATOR {% endif -%}
        {%- endfor %}
    );
{%- else %}
    return 0;
{% endif -%}
}
{% endfor %}

// ============== UTILS ============== //

void {{ network.name }}_fields_from_id(canlib_message_id message_id, FILE *buffer) {
    switch (message_id) {
{%- for message_name, message_contents in network.messages.items() %}
{%- for message_id in message_contents["id"].values() %}
    case {{ message_id }}:
        {{ network.name }}_fields_file_{{ message_name }}(buffer);
        break;
{%- endfor %}
{%- endfor %}
    }
}

void {{ network.name }}_string_from_id(canlib_message_id message_id, void* message, FILE *buffer) {
    switch (message_id) {
{%- for message_name, message_contents in network.messages.items() %}
{%- for message_id in message_contents["id"].values() %}
        case {{ message_id }}:
{%- for schema_msg in schema.messages -%}
{%- if schema_msg.name == message_name %}
{%- if schema_msg.has_conversions %}
            {{ network.name }}_to_string_file_{{ message_name }}(({{ network.name }}_message_{{ message_name }}_conversion*) message, buffer);
{%- else %}
            {{ network.name }}_to_string_file_{{ message_name }}(({{ network.name }}_message_{{ message_name }}*) message, buffer);
{%- endif -%}
{%- endif -%}
{%- endfor %}
        break;
{%- endfor %}
{%- endfor %}
    }
}

void {{ network.name }}_deserialize_from_id(
    canlib_message_id message_id,
    uint8_t* data,
    void* raw_message,
    void* message
#ifdef CANLIB_TIMESTAMP
    , {{ network.name }}_uint64 timestamp
#endif // CANLIB_TIMESTAMP
) {
    switch (message_id) {
{%- for message_name, message_contents in network.messages.items() %}
{%- for message_id in message_contents["id"].values() %}
        case {{ message_id }}:
{%- for schema_msg in schema.messages -%}
{%- if schema_msg.name == message_name %}
{%- if schema_msg.has_conversions %}
            {{ network.name }}_deserialize_{{ message_name }}(
                ({{ network.name }}_message_{{ message_name }}*) raw_message,
                data
                #ifdef CANLIB_TIMESTAMP
                , timestamp
                #endif
            );
            {{ network.name }}_raw_to_conversion_{{ message_name }}(
                ({{ network.name }}_message_{{message_name}}_conversion*) message,
                ({{ network.name }}_message_{{message_name}}*) raw_message
            );
{%- else %}
            {{ network.name }}_deserialize_{{ message_name }}(
                ({{ network.name }}_message_{{ message_name }}*) raw_message,
                data
                #ifdef CANLIB_TIMESTAMP
                , timestamp
                #endif
            );
{%- endif -%}
{%- endif -%}
{%- endfor %}
        break;
{%- endfor %}
{%- endfor %}
    }
}

void {{ network.name }}_devices_new({{ network.name }}_devices* map) {
{%- set ns = namespace(inner_loop=0) -%}
{%- for message_name, message_contents in network.messages.items() -%}
{%- set outer_loop = loop -%}
{%- for message_id in message_contents["id"].values() -%}
{%- set ns.inner_loop = [ns.inner_loop, loop.index0]|max %}
    (*map)[{{ outer_loop.index0 + ns.inner_loop }}].id = {{ message_id }};
    (*map)[{{ outer_loop.index0 + ns.inner_loop }}].raw_message = (void*) malloc(sizeof({{ network.name }}_message_{{ message_name }}));
{%- for schema_msg in schema.messages -%}
{%- if schema_msg.name == message_name %}
{%- if schema_msg.has_conversions %}
    (*map)[{{ outer_loop.index0 + ns.inner_loop }}].message = (void*) malloc(sizeof({{ network.name }}_message_{{ message_name }}_conversion));
{% else %}
    (*map)[{{ outer_loop.index0 + ns.inner_loop }}].message = NULL;
{% endif -%}
{% endif -%}
{% endfor -%}
{% endfor %}
{%- endfor %}
}

int {{ network.name }}_devices_index_from_id(canlib_message_id message_id, {{ network.name }}_devices* map) {
    for (int index = 0; index < {{ network.name }}_NUMBER_OF_MESSAGES; index++) {
        if ((*map)[index].id == message_id)
            return index;
    }
    return -1;
}

#endif

#ifdef __cplusplus
}
#endif

#endif // {{ network.name }}_NETWORK_H
