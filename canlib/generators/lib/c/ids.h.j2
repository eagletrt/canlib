#ifndef {{ network.name }}_IDS_H
#define {{ network.name }}_IDS_H

#include <stdint.h>
#include <string.h>

#define {{ network.name }}_IDS_VERSION {{ network.version }}
{% for topic_name, topic_id in network.topics.items() %}
{%- set topic_messages = network.get_messages_by_topic(topic_name) %}
/* TOPIC {{ topic_name }} */
#define {{ network.name }}_topic_mask_{{ topic_name }} 0b00000011111
{%- if topic_id %}
#define {{ network.name }}_topic_filter_{{ topic_name }} 0b{{ "{0:>011b}".format(topic_id) }}
{%- endif %}
{% for message in topic_messages.values() %}
{%- for message_sub_name, message_id in message["id"].items() %}
#define {{ network.name }}_id_{{ message_sub_name }} 0b{{ "{0:>011b}".format(message_id) }}
{%- endfor %}
{%- endfor %}
{% endfor %}

// ============== UTILS ============== //

#define {{ network.name }}_MAX_MESSAGE_LENGTH {{ network.max_message_length() + 1 }}

#ifdef {{ network.name }}_IDS_IMPLEMENTATION

int {{ network.name }}_message_name_from_id(uint16_t id, char *buffer) {
    switch (id) {
{%- for message in network.messages.values() %}
{%- for message_sub_name in message["id"].keys() %}
        case {{ network.name }}_id_{{ message_sub_name }}:
            strcpy(buffer, "{{ message_sub_name }}");
            return 0;
{%- endfor %}
{%- endfor %}
        default:
            strcpy(buffer, ""); // Unknown message
    }
    return 1;
}

#endif // {{ network.name }}_IDS_IMPLEMENTATION

#endif // {{ network.name }}_IDS_H
